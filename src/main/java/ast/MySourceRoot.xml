<?xml version='1.0' encoding='UTF-8'?><root type="CompilationUnit"><packageDeclaration type="PackageDeclaration"><name type="Name" identifier="javaparser"><qualifier type="Name" identifier="lguplus"><qualifier type="Name" identifier="com"/></qualifier></name></packageDeclaration><imports><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="ParseResult"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="ParserConfiguration"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CompilationUnit"><qualifier type="Name" identifier="ast"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="ClassOrInterfaceDeclaration"><qualifier type="Name" identifier="body"><qualifier type="Name" identifier="ast"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="XmlPrinter"><qualifier type="Name" identifier="printer"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="SourceRoot"><qualifier type="Name" identifier="utils"><qualifier type="Name" identifier="javaparser"><qualifier type="Name" identifier="github"><qualifier type="Name" identifier="com"/></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Slf4j"><qualifier type="Name" identifier="slf4j"><qualifier type="Name" identifier="extern"><qualifier type="Name" identifier="lombok"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="File"><qualifier type="Name" identifier="io"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="FileNotFoundException"><qualifier type="Name" identifier="io"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="FileOutputStream"><qualifier type="Name" identifier="io"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="IOException"><qualifier type="Name" identifier="io"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Path"><qualifier type="Name" identifier="file"><qualifier type="Name" identifier="nio"><qualifier type="Name" identifier="java"/></qualifier></qualifier></name></import></imports><types><type type="ClassOrInterfaceDeclaration" isInterface="false"><name type="SimpleName" identifier="MySourceRoot"/><extendedTypes><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="SourceRoot"/></extendedType></extendedTypes><members><member type="ConstructorDeclaration"><body type="BlockStmt"><statements><statement type="ExplicitConstructorInvocationStmt" isThis="false"><arguments><argument type="NameExpr"><name type="SimpleName" identifier="root"/></argument></arguments></statement></statements></body><name type="SimpleName" identifier="MySourceRoot"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="root"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Path"/></type></parameter></parameters></member><member type="ConstructorDeclaration"><body type="BlockStmt"><statements><statement type="ExplicitConstructorInvocationStmt" isThis="false"><arguments><argument type="NameExpr"><name type="SimpleName" identifier="root"/></argument><argument type="NameExpr"><name type="SimpleName" identifier="parserConfiguration"/></argument></arguments></statement></statements></body><name type="SimpleName" identifier="MySourceRoot"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="root"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Path"/></type></parameter><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="parserConfiguration"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="ParserConfiguration"/></type></parameter></parameters></member><member type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="Overrided Method is Called! (MySourceRoot.tryToParse)"/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="tryToParse"/><scope type="SuperExpr"/><arguments><argument type="NameExpr"><name type="SimpleName" identifier="startPackage"/></argument><argument type="NameExpr"><name type="SimpleName" identifier="filename"/></argument><argument type="NameExpr"><name type="SimpleName" identifier="configuration"/></argument></arguments></initializer><name type="SimpleName" identifier="result"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="ParseResult"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CompilationUnit"/></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="ifPresent"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getResult"/><scope type="NameExpr"><name type="SimpleName" identifier="result"/></scope></scope><arguments><argument type="LambdaExpr" isEnclosingParameters="false"><body type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="saveXMLFile"/><arguments><argument type="NameExpr"><name type="SimpleName" identifier="cu"/></argument></arguments></expression></body><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="cu"/><type type="UnknownType"/></parameter></parameters></argument></arguments></expression><comment type="LineComment" content="result를 파일로 저장..."/></statement><statement type="ReturnStmt"><expression type="NameExpr"><name type="SimpleName" identifier="result"/></expression></statement></statements></body><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="ParseResult"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CompilationUnit"/></typeArgument></typeArguments></type><name type="SimpleName" identifier="tryToParse"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="startPackage"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></parameter><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="filename"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></parameter><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="configuration"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="ParserConfiguration"/></type></parameter></parameters><thrownExceptions><thrownException type="ClassOrInterfaceType"><name type="SimpleName" identifier="IOException"/></thrownException></thrownExceptions><annotations><annotation type="MarkerAnnotationExpr"><name type="Name" identifier="Override"/></annotation></annotations></member><member type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="'saveXMLFile' Method is Called."/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="BinaryExpr" operator="PLUS"><left type="MethodCallExpr"><name type="SimpleName" identifier="toString"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getRoot"/><scope type="SuperExpr"/></scope></left><right type="StringLiteralExpr" value="/ast/"/></initializer><name type="SimpleName" identifier="strFolderPath"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="XmlPrinter"/></type><arguments><argument type="BooleanLiteralExpr" value="true"/></arguments></initializer><name type="SimpleName" identifier="printer"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="XmlPrinter"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="strFolderPath = {}"/><argument type="NameExpr"><name type="SimpleName" identifier="strFolderPath"/></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="File"/></type><arguments><argument type="NameExpr"><name type="SimpleName" identifier="strFolderPath"/></argument></arguments></initializer><name type="SimpleName" identifier="folder"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="File"/></type></variable></variables></expression></statement><statement type="IfStmt"><condition type="UnaryExpr" operator="LOGICAL_COMPLEMENT"><expression type="MethodCallExpr"><name type="SimpleName" identifier="exists"/><scope type="NameExpr"><name type="SimpleName" identifier="folder"/></scope></expression></condition><thenStmt type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="mkdir"/><scope type="NameExpr"><name type="SimpleName" identifier="folder"/></scope></expression></statement></statements></thenStmt></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="forEach"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="stream"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="findAll"/><scope type="NameExpr"><name type="SimpleName" identifier="cu"/></scope><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="ClassOrInterfaceDeclaration"/></type></argument></arguments></scope></scope><arguments><argument type="LambdaExpr" isEnclosingParameters="false"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="BinaryExpr" operator="PLUS"><left type="BinaryExpr" operator="PLUS"><left type="NameExpr"><name type="SimpleName" identifier="strFolderPath"/></left><right type="MethodCallExpr"><name type="SimpleName" identifier="getNameAsString"/><scope type="NameExpr"><name type="SimpleName" identifier="e"/></scope></right></left><right type="StringLiteralExpr" value=".xml"/></initializer><name type="SimpleName" identifier="strFullFilePath"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="strFullFilePath = {}"/><argument type="NameExpr"><name type="SimpleName" identifier="strFullFilePath"/></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="File"/></type><arguments><argument type="NameExpr"><name type="SimpleName" identifier="strFullFilePath"/></argument></arguments></initializer><name type="SimpleName" identifier="file"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="File"/></type></variable></variables></expression></statement><statement type="TryStmt"><tryBlock type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="FileOutputStream"/></type><arguments><argument type="NameExpr"><name type="SimpleName" identifier="file"/></argument><argument type="BooleanLiteralExpr" value="false"/></arguments></initializer><name type="SimpleName" identifier="fos"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="FileOutputStream"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="write"/><scope type="NameExpr"><name type="SimpleName" identifier="fos"/></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="getBytes"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="output"/><scope type="NameExpr"><name type="SimpleName" identifier="printer"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="cu"/></argument></arguments></scope></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type="CatchClause"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="error"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="Generating file failed. {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getMessage"/><scope type="NameExpr"><name type="SimpleName" identifier="ex"/></scope></argument></arguments></expression></statement></statements></body><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="ex"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="IOException"/></type></parameter></catchClause></catchClauses></statement></statements></body><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="e"/><type type="UnknownType"/></parameter></parameters></argument></arguments></expression></statement><statement type="ReturnStmt"><expression type="BooleanLiteralExpr" value="true"/></statement></statements></body><type type="PrimitiveType" type="BOOLEAN"/><name type="SimpleName" identifier="saveXMLFile"/><modifiers><modifier type="Modifier" keyword="PRIVATE"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="cu"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CompilationUnit"/></type></parameter></parameters></member></members><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><annotations><annotation type="MarkerAnnotationExpr"><name type="Name" identifier="Slf4j"/></annotation></annotations></type></types></root>