<?xml version='1.0' encoding='UTF-8'?><root type="CompilationUnit"><packageDeclaration type="PackageDeclaration"><name type="Name" identifier="lguplus"><qualifier type="Name" identifier="com"/></name></packageDeclaration><imports><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Slf4j"><qualifier type="Name" identifier="slf4j"><qualifier type="Name" identifier="extern"><qualifier type="Name" identifier="lombok"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Launcher"><qualifier type="Name" identifier="spoon"/></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtModel"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtInvocation"><qualifier type="Name" identifier="code"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtClass"><qualifier type="Name" identifier="declaration"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtMethod"><qualifier type="Name" identifier="declaration"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtAnnotation"><qualifier type="Name" identifier="declaration"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtExecutableReference"><qualifier type="Name" identifier="reference"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Factory"><qualifier type="Name" identifier="factory"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtTypeReference"><qualifier type="Name" identifier="reference"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CtScanner"><qualifier type="Name" identifier="visitor"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="TypeFilter"><qualifier type="Name" identifier="filter"><qualifier type="Name" identifier="visitor"><qualifier type="Name" identifier="reflect"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="CompilationUnitFilter"><qualifier type="Name" identifier="jdt"><qualifier type="Name" identifier="compiler"><qualifier type="Name" identifier="support"><qualifier type="Name" identifier="spoon"/></qualifier></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Annotation"><qualifier type="Name" identifier="annotation"><qualifier type="Name" identifier="lang"><qualifier type="Name" identifier="java"/></qualifier></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="List"><qualifier type="Name" identifier="util"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Set"><qualifier type="Name" identifier="util"><qualifier type="Name" identifier="java"/></qualifier></name></import><import type="ImportDeclaration" isAsterisk="false" isStatic="false"><name type="Name" identifier="Collectors"><qualifier type="Name" identifier="stream"><qualifier type="Name" identifier="util"><qualifier type="Name" identifier="java"/></qualifier></qualifier></name></import></imports><types><type type="ClassOrInterfaceDeclaration" isInterface="false"><name type="SimpleName" identifier="Main"/><members><member type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="println"/><scope type="FieldAccessExpr"><name type="SimpleName" identifier="out"/><scope type="NameExpr"><name type="SimpleName" identifier="System"/></scope></scope><arguments><argument type="StringLiteralExpr" value="Hello world!"/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="number_one"/></expression><comment type="LineComment" content="1. 어떤 서비스 메소드가 있을 때, 이 서비스 메소드를 참조하는 다른 서비스/컨트롤러들을 찾아서, 결국 어떤 API에 영향이 있는지 찾아서 출력하기"/></statement></statements></body><type type="VoidType"/><name type="SimpleName" identifier="main"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/><modifier type="Modifier" keyword="STATIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="args"/><type type="ArrayType" origin="TYPE"><componentType type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></componentType></type></parameter></parameters></member><member type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="StringLiteralExpr" value="/Users/seonmiji/IdeaProjects/nucm-svc-sample/src/main/java/com/lguplus/ncube/nucm/online/rvspvs/service/OcmpTrmDvchLikgMService.java"/><name type="SimpleName" identifier="filePath"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Launcher"/></type></initializer><name type="SimpleName" identifier="launcher"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Launcher"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="addInputResource"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="filePath"/></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="setNoClasspath"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getEnvironment"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></scope><arguments><argument type="BooleanLiteralExpr" value="true"/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="파일 로드까지 실행 완료."/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="setComplianceLevel"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getEnvironment"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></scope><arguments><argument type="IntegerLiteralExpr" value="7"/></arguments></expression><comment type="LineComment" content="        &quot;lib1.jar:lib2.jar&quot;.split(&quot;:&quot;));"/></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="buildModel"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></initializer><name type="SimpleName" identifier="model"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtModel"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getElements"/><scope type="NameExpr"><name type="SimpleName" identifier="model"/></scope><arguments><argument type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="TypeFilter"/><typeArguments/></type><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtClass"/></type></argument></arguments></argument></arguments></initializer><name type="SimpleName" identifier="list"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="List"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtClass"/></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="forEach"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="stream"/><scope type="NameExpr"><name type="SimpleName" identifier="list"/></scope></scope><arguments><argument type="LambdaExpr" isEnclosingParameters="false"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getMethods"/><scope type="NameExpr"><name type="SimpleName" identifier="ctClass"/></scope></initializer><name type="SimpleName" identifier="methodSet"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Set"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="forEach"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="stream"/><scope type="NameExpr"><name type="SimpleName" identifier="methodSet"/></scope></scope><arguments><argument type="LambdaExpr" isEnclosingParameters="false"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="ctMethod"/></scope></argument></arguments></expression></statement></statements></body><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="ctMethod"/><type type="UnknownType"/></parameter></parameters></argument></arguments></expression></statement></statements></body><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="ctClass"/><type type="UnknownType"/></parameter></parameters></argument></arguments></expression></statement></statements></body><type type="VoidType"/><name type="SimpleName" identifier="number_zero"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/><modifier type="Modifier" keyword="STATIC"/></modifiers></member><member type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="StringLiteralExpr" value="/Users/seonmiji/IdeaProjects/nucm-svc-master/src/main/java/com/lguplus/ncube/nucm/online/rvspvs"/><name type="SimpleName" identifier="filePath"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Launcher"/></type></initializer><name type="SimpleName" identifier="launcher"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Launcher"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="addInputResource"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="filePath"/></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="setNoClasspath"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getEnvironment"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></scope><arguments><argument type="BooleanLiteralExpr" value="true"/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="파일 로드까지 실행 완료."/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="setComplianceLevel"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getEnvironment"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></scope><arguments><argument type="IntegerLiteralExpr" value="8"/></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="buildModel"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></initializer><name type="SimpleName" identifier="model"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtModel"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getFactory"/><scope type="NameExpr"><name type="SimpleName" identifier="launcher"/></scope></initializer><name type="SimpleName" identifier="factory"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="Factory"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="get"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="Class"/><scope type="NameExpr"><name type="SimpleName" identifier="factory"/></scope></scope><arguments><argument type="StringLiteralExpr" value="com.lguplus.ncube.nucm.online.rvspvs.service.OcmpTrmDvchLikgMService"/></arguments></initializer><name type="SimpleName" identifier="aClass"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtClass"/><typeArguments><typeArgument type="WildcardType"/></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="get"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getMethodsByName"/><scope type="NameExpr"><name type="SimpleName" identifier="aClass"/></scope><arguments><argument type="StringLiteralExpr" value="receiveOcmpDevUsimChng"/></arguments></scope><arguments><argument type="IntegerLiteralExpr" value="0"/></arguments></initializer><name type="SimpleName" identifier="ctMethod"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/><typeArguments><typeArgument type="WildcardType"/></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="aClass = {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="aClass"/></scope></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="ctMethod = {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="ctMethod"/></scope></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="collect"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="map"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="stream"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getElements"/><scope type="NameExpr"><name type="SimpleName" identifier="model"/></scope><arguments><argument type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="TypeFilter"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtInvocation"/></typeArgument></typeArguments></type><anonymousClassBody><anonymousClassBod type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getExecutable"/><scope type="NameExpr"><name type="SimpleName" identifier="element"/></scope></initializer><name type="SimpleName" identifier="executable"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtExecutableReference"/></type></variable></variables></expression></statement><statement type="IfStmt"><condition type="BinaryExpr" operator="AND"><left type="MethodCallExpr"><name type="SimpleName" identifier="equals"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="executable"/></scope></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="ctMethod"/></scope></argument></arguments></left><right type="MethodCallExpr"><name type="SimpleName" identifier="isOverriding"/><scope type="NameExpr"><name type="SimpleName" identifier="executable"/></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="getReference"/><scope type="NameExpr"><name type="SimpleName" identifier="ctMethod"/></scope></argument></arguments></right></condition><thenStmt type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="ctMethod : {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="ctMethod"/></scope></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="executable : {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="executable"/></scope></argument></arguments></expression></statement><statement type="ReturnStmt"><expression type="BooleanLiteralExpr" value="true"/></statement></statements></thenStmt></statement><statement type="ReturnStmt"><expression type="BooleanLiteralExpr" value="false"/></statement></statements></body><type type="PrimitiveType" type="BOOLEAN"/><name type="SimpleName" identifier="matches"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="element"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtInvocation"/></type></parameter></parameters><annotations><annotation type="MarkerAnnotationExpr"><name type="Name" identifier="Override"/></annotation></annotations></anonymousClassBod></anonymousClassBody><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtInvocation"/></type></argument></arguments></argument></arguments></scope></scope><arguments><argument type="LambdaExpr" isEnclosingParameters="false"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getParent"/><scope type="NameExpr"><name type="SimpleName" identifier="i"/></scope><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></type></argument></arguments></initializer><name type="SimpleName" identifier="parent"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="putMetadata"/><scope type="NameExpr"><name type="SimpleName" identifier="parent"/></scope><arguments><argument type="StringLiteralExpr" value="OcmpTrmDvchLikgMService"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="toString"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="get"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getArguments"/><scope type="NameExpr"><name type="SimpleName" identifier="i"/></scope></scope><arguments><argument type="IntegerLiteralExpr" value="0"/></arguments></scope></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="prettyprint"/><scope type="NameExpr"><name type="SimpleName" identifier="parent"/></scope></argument></arguments></expression></statement><statement type="ReturnStmt"><expression type="NameExpr"><name type="SimpleName" identifier="parent"/></expression></statement></statements></body><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="i"/><type type="UnknownType"/></parameter></parameters></argument></arguments></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="toList"/><scope type="NameExpr"><name type="SimpleName" identifier="Collectors"/></scope></argument></arguments></initializer><name type="SimpleName" identifier="callers"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="List"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="createReference"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="Type"/><scope type="NameExpr"><name type="SimpleName" identifier="factory"/></scope></scope><arguments><argument type="StringLiteralExpr" value="org.springframework.web.bind.annotation.RequestMapping"/></arguments></initializer><name type="SimpleName" identifier="requestAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtTypeReference"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="createReference"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="Type"/><scope type="NameExpr"><name type="SimpleName" identifier="factory"/></scope></scope><arguments><argument type="StringLiteralExpr" value="org.springframework.web.bind.annotation.GetMapping"/></arguments></initializer><name type="SimpleName" identifier="getAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtTypeReference"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="createReference"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="Type"/><scope type="NameExpr"><name type="SimpleName" identifier="factory"/></scope></scope><arguments><argument type="StringLiteralExpr" value="org.springframework.web.bind.annotation.PostMapping"/></arguments></initializer><name type="SimpleName" identifier="postAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtTypeReference"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="accept"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getRootPackage"/><scope type="NameExpr"><name type="SimpleName" identifier="model"/></scope></scope><arguments><argument type="ObjectCreationExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtScanner"/></type><anonymousClassBody><anonymousClassBod type="MethodDeclaration"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getExecutable"/><scope type="NameExpr"><name type="SimpleName" identifier="invocation"/></scope></initializer><name type="SimpleName" identifier="executable"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtExecutableReference"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="T"/></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ForStmt"><body type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="get"/><scope type="NameExpr"><name type="SimpleName" identifier="callers"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="i"/></argument></arguments></initializer><name type="SimpleName" identifier="method"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></type></variable></variables></expression></statement><statement type="IfStmt"><condition type="MethodCallExpr"><name type="SimpleName" identifier="equals"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getSignature"/><scope type="NameExpr"><name type="SimpleName" identifier="method"/></scope></scope><arguments><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSignature"/><scope type="NameExpr"><name type="SimpleName" identifier="executable"/></scope></argument></arguments></condition><thenStmt type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getParent"/><scope type="NameExpr"><name type="SimpleName" identifier="invocation"/></scope><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></type></argument></arguments></initializer><name type="SimpleName" identifier="parent"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtMethod"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getParent"/><scope type="NameExpr"><name type="SimpleName" identifier="invocation"/></scope><arguments><argument type="ClassExpr"><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtClass"/></type></argument></arguments></initializer><name type="SimpleName" identifier="parentClss"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtClass"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="info"/><scope type="NameExpr"><name type="SimpleName" identifier="log"/></scope><arguments><argument type="StringLiteralExpr" value="Controller = {}"/><argument type="MethodCallExpr"><name type="SimpleName" identifier="getSimpleName"/><scope type="NameExpr"><name type="SimpleName" identifier="parentClss"/></scope></argument></arguments></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getAnnotation"/><scope type="NameExpr"><name type="SimpleName" identifier="parentClss"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="requestAnnotation"/></argument></arguments></initializer><name type="SimpleName" identifier="requestCtAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtAnnotation"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="toString"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getValue"/><scope type="NameExpr"><name type="SimpleName" identifier="requestCtAnnotation"/></scope><arguments><argument type="StringLiteralExpr" value="value"/></arguments></scope></initializer><name type="SimpleName" identifier="subDomain"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getAnnotation"/><scope type="NameExpr"><name type="SimpleName" identifier="parent"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="getAnnotation"/></argument></arguments></initializer><name type="SimpleName" identifier="getCtAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtAnnotation"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="MethodCallExpr"><name type="SimpleName" identifier="getAnnotation"/><scope type="NameExpr"><name type="SimpleName" identifier="parent"/></scope><arguments><argument type="NameExpr"><name type="SimpleName" identifier="postAnnotation"/></argument></arguments></initializer><name type="SimpleName" identifier="postCtAnnotation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtAnnotation"/><typeArguments><typeArgument type="WildcardType"><extendedType type="ClassOrInterfaceType"><name type="SimpleName" identifier="Annotation"/></extendedType></typeArgument></typeArguments></type></variable></variables></expression></statement><statement type="IfStmt"><condition type="BinaryExpr" operator="NOT_EQUALS"><left type="NameExpr"><name type="SimpleName" identifier="getCtAnnotation"/></left><right type="NullLiteralExpr"/></condition><elseStmt type="IfStmt"><condition type="BinaryExpr" operator="NOT_EQUALS"><left type="NameExpr"><name type="SimpleName" identifier="postCtAnnotation"/></left><right type="NullLiteralExpr"/></condition><thenStmt type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="BinaryExpr" operator="PLUS"><left type="NameExpr"><name type="SimpleName" identifier="subDomain"/></left><right type="MethodCallExpr"><name type="SimpleName" identifier="toString"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getValue"/><scope type="NameExpr"><name type="SimpleName" identifier="postCtAnnotation"/></scope><arguments><argument type="StringLiteralExpr" value="value"/></arguments></scope></right></initializer><name type="SimpleName" identifier="uri"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="AssignExpr" operator="ASSIGN"><target type="NameExpr"><name type="SimpleName" identifier="uri"/></target><value type="MethodCallExpr"><name type="SimpleName" identifier="replace"/><scope type="NameExpr"><name type="SimpleName" identifier="uri"/></scope><arguments><argument type="StringLiteralExpr" value="\&quot;"/><argument type="StringLiteralExpr" value=""/></arguments></value></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="println"/><scope type="FieldAccessExpr"><name type="SimpleName" identifier="out"/><scope type="NameExpr"><name type="SimpleName" identifier="System"/></scope></scope><arguments><argument type="BinaryExpr" operator="PLUS"><left type="BinaryExpr" operator="PLUS"><left type="MethodCallExpr"><name type="SimpleName" identifier="getMetadata"/><scope type="NameExpr"><name type="SimpleName" identifier="method"/></scope><arguments><argument type="StringLiteralExpr" value="OcmpTrmDvchLikgMService"/></arguments></left><right type="StringLiteralExpr" value=" -> "/></left><right type="NameExpr"><name type="SimpleName" identifier="uri"/></right></argument></arguments></expression></statement></statements></thenStmt></elseStmt><thenStmt type="BlockStmt"><statements><statement type="ExpressionStmt"><expression type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="BinaryExpr" operator="PLUS"><left type="NameExpr"><name type="SimpleName" identifier="subDomain"/></left><right type="MethodCallExpr"><name type="SimpleName" identifier="toString"/><scope type="MethodCallExpr"><name type="SimpleName" identifier="getValue"/><scope type="NameExpr"><name type="SimpleName" identifier="getCtAnnotation"/></scope><arguments><argument type="StringLiteralExpr" value="value"/></arguments></scope></right></initializer><name type="SimpleName" identifier="uri"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="String"/></type></variable></variables></expression></statement><statement type="ExpressionStmt"><expression type="AssignExpr" operator="ASSIGN"><target type="NameExpr"><name type="SimpleName" identifier="uri"/></target><value type="MethodCallExpr"><name type="SimpleName" identifier="replace"/><scope type="NameExpr"><name type="SimpleName" identifier="uri"/></scope><arguments><argument type="StringLiteralExpr" value="\&quot;"/><argument type="StringLiteralExpr" value=""/></arguments></value></expression></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="println"/><scope type="FieldAccessExpr"><name type="SimpleName" identifier="out"/><scope type="NameExpr"><name type="SimpleName" identifier="System"/></scope></scope><arguments><argument type="BinaryExpr" operator="PLUS"><left type="BinaryExpr" operator="PLUS"><left type="MethodCallExpr"><name type="SimpleName" identifier="getMetadata"/><scope type="NameExpr"><name type="SimpleName" identifier="method"/></scope><arguments><argument type="StringLiteralExpr" value="OcmpTrmDvchLikgMService"/></arguments></left><right type="StringLiteralExpr" value=" -> "/></left><right type="NameExpr"><name type="SimpleName" identifier="uri"/></right></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><compare type="BinaryExpr" operator="LESS"><left type="NameExpr"><name type="SimpleName" identifier="i"/></left><right type="MethodCallExpr"><name type="SimpleName" identifier="size"/><scope type="NameExpr"><name type="SimpleName" identifier="callers"/></scope></right></compare><initialization><initializatio type="VariableDeclarationExpr"><variables><variable type="VariableDeclarator"><initializer type="IntegerLiteralExpr" value="0"/><name type="SimpleName" identifier="i"/><type type="PrimitiveType" type="INT"/></variable></variables></initializatio></initialization><update><updat type="UnaryExpr" operator="POSTFIX_INCREMENT"><expression type="NameExpr"><name type="SimpleName" identifier="i"/></expression></updat></update></statement><statement type="ExpressionStmt"><expression type="MethodCallExpr"><name type="SimpleName" identifier="visitCtInvocation"/><scope type="SuperExpr"/><arguments><argument type="NameExpr"><name type="SimpleName" identifier="invocation"/></argument></arguments></expression></statement></statements></body><type type="VoidType"/><name type="SimpleName" identifier="visitCtInvocation"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><parameters><parameter type="Parameter" isVarArgs="false"><name type="SimpleName" identifier="invocation"/><type type="ClassOrInterfaceType"><name type="SimpleName" identifier="CtInvocation"/><typeArguments><typeArgument type="ClassOrInterfaceType"><name type="SimpleName" identifier="T"/></typeArgument></typeArguments></type></parameter></parameters><typeParameters><typeParameter type="TypeParameter"><name type="SimpleName" identifier="T"/></typeParameter></typeParameters><annotations><annotation type="MarkerAnnotationExpr"><name type="Name" identifier="Override"/></annotation></annotations></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement></statements></body><type type="VoidType"/><name type="SimpleName" identifier="number_one"/><modifiers><modifier type="Modifier" keyword="PUBLIC"/><modifier type="Modifier" keyword="STATIC"/></modifiers></member></members><modifiers><modifier type="Modifier" keyword="PUBLIC"/></modifiers><annotations><annotation type="MarkerAnnotationExpr"><name type="Name" identifier="Slf4j"/></annotation></annotations></type></types></root>